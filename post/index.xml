<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>博客文章 on 幸存者IMxcz.Com</title>
    <link>https://imxcz.com/post/</link>
    <description>Recent content in 博客文章 on 幸存者IMxcz.Com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 22 Feb 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://imxcz.com/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang 监听文件变化(非轮询)</title>
      <link>https://imxcz.com/post/2021/golang-jiantingwenjian/</link>
      <pubDate>Mon, 22 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://imxcz.com/post/2021/golang-jiantingwenjian/</guid>
      <description>Golang 监听文件变化(非轮询) 最近研究openresty(nginx+lua)，由于这货热更有点麻烦，所以就写就用golang写了一个文件监听的程序，监听到配置文件或lua文件更改就重启</description>
    </item>
    
    <item>
      <title>hugo markdown文章新窗口打开超链接</title>
      <link>https://imxcz.com/post/2021/hugo-markdown-target/</link>
      <pubDate>Mon, 22 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://imxcz.com/post/2021/hugo-markdown-target/</guid>
      <description>一、通过js修改链接a标签 target &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; function addaTarget(id) { var aTags = document.getElementById(id).getElementsByTagName(&amp;#34;a&amp;#34;); for (i = 0; i &amp;lt; aTags.length; i++) { var aTags_item = aTags[i]; aTags_item.target = &amp;#34;_blank&amp;#34;; } } addaTarget(&amp;#34;post-content-id&amp;#34;); &amp;lt;/script&amp;gt; 二、通过Hugo Markdown Render Hooks 可在超链接添加title标签 [Text](https://www.gohugo.io &amp;quot;Title&amp;quot;) 增加下面模板文件 layouts/_default/_markup/render-link.html &amp;lt;a href=&amp;#34;{{ .Destination | safeURL }}&amp;#34;{{ with .Title}} title=&amp;#34;{{ . }}&amp;#34;{{</description>
    </item>
    
    <item>
      <title>MacOS 系统实用命令记录</title>
      <link>https://imxcz.com/post/2019/macos-mingling/</link>
      <pubDate>Sat, 09 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://imxcz.com/post/2019/macos-mingling/</guid>
      <description>强制关闭系统对时光机器的限流，俗称“解除封印” sudo sysctl debug.lowpri_throttle_enabled=0 恢复时光机器限流状态 sudo sysctl debug.lowpri_throttle_enabled=1</description>
    </item>
    
    <item>
      <title>javascript中date详细介绍</title>
      <link>https://imxcz.com/post/2019/javascript-date/</link>
      <pubDate>Fri, 19 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://imxcz.com/post/2019/javascript-date/</guid>
      <description>1、var myDate = new Date(); Date() 返回当日的日期和时间。 getDate() 从 Date 对象返回一个月中的某一天 (1 ~ 31)。 getDay() 从 Date 对象返回一周中的某一天 (0 ~ 6)。 getMonth() 从 Date 对象返回月份 (0 ~ 11)。 getFullYear() 从 Date 对象以四位数字返回年份</description>
    </item>
    
    <item>
      <title>Golang操作笔记</title>
      <link>https://imxcz.com/post/2019/golang-caozuo-biji/</link>
      <pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://imxcz.com/post/2019/golang-caozuo-biji/</guid>
      <description>Golang 判断字符串中是否包含其他某字符 import ( &amp;#34;fmt&amp;#34; &amp;#34;strings&amp;#34; ) func main() { fmt.Println(strings.Contains(&amp;#34;widuu&amp;#34;, &amp;#34;wi&amp;#34;)) //true fmt.Println(strings.Contains(&amp;#34;wi&amp;#34;, &amp;#34;widuu&amp;#34;)) //false } Golang 判断字符串中是否包含 chars 中的任何一个字符 func main() { b := strings.ContainsAny(&amp;#34;Hello,世界!</description>
    </item>
    
    <item>
      <title>Golang正则查找与替换</title>
      <link>https://imxcz.com/post/2019/golang-zhengze-find-replace/</link>
      <pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://imxcz.com/post/2019/golang-zhengze-find-replace/</guid>
      <description>Golang正则查找与替换 package main; import ( &amp;#34;regexp&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;strings&amp;#34; ) func main() { //1、过正则来判断字符串是否匹配 if ok, _ := regexp.Match(&amp;#34;^[0-9a-zA-Z_]+$&amp;#34;, []byte(&amp;#34;hello&amp;#34;)); ok { fmt.Println(&amp;#34;ok&amp;#34;); } //上面的例子也可以通过MatchString实现 if ok, _ := regexp.MatchString(&amp;#34;^[0-9a-zA-Z_]+$&amp;#34;, &amp;#34;hello&amp;#34;); ok { fmt.Println(&amp;#34;ok&amp;#34;); } //2、</description>
    </item>
    
    <item>
      <title>CSS面试题[分享知识]</title>
      <link>https://imxcz.com/post/2018/css-mianshiti/</link>
      <pubDate>Wed, 01 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imxcz.com/post/2018/css-mianshiti/</guid>
      <description>CSS面试题 1、position的值， relative和absolute分别是相对于谁进行定位的？ absolute :生成绝对定位的元素， 相对于最近一级的 定位不是 static 的父元素来进行定位。 fixed （老IE不</description>
    </item>
    
    <item>
      <title>Git 代理设置</title>
      <link>https://imxcz.com/post/2018/git-proxy-setting/</link>
      <pubDate>Mon, 02 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imxcz.com/post/2018/git-proxy-setting/</guid>
      <description>本地开启代理后，GIt也需要设置代理，才能正常通过代理网络 设置如下（可复制）： git config --global http.proxy http://127.0.0.1:1087 git config --global https.proxy https://127.0.0.1:1080 git config --global http.proxy &amp;#39;socks5://127.0.0.1:1080&amp;#39; git config --global https.proxy &amp;#39;socks5://127.0.0.1:1080&amp;#39; 取消 git config --global --unset http.proxy git config --global --unset https.proxy</description>
    </item>
    
    <item>
      <title>MySql 常用查询语句整理中</title>
      <link>https://imxcz.com/post/2018/mysql-chaxun-yuju/</link>
      <pubDate>Sat, 02 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imxcz.com/post/2018/mysql-chaxun-yuju/</guid>
      <description>MySql 常用查询语句整理中 Group by 前排序、查询数据库中哪些表包含某个字段 Group by 前排序 select * from (select * from ls_list order by id desc) ls_list1 group by gid order by id 查询数据库中哪些表包含某个字段 已知一个字段中含有字符lan，想知道数据库</description>
    </item>
    
    <item>
      <title>VsFtp 详细设置记录</title>
      <link>https://imxcz.com/post/2018/vsftp-setting/</link>
      <pubDate>Wed, 02 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imxcz.com/post/2018/vsftp-setting/</guid>
      <description>VsFtp 详细设置 1-卸载 查看当前服务器中的vsftpd rpm -qa|grep vsftpd 例如结果为：vsftpd-2.2.2-13.el6_6.1.x86_64 执行卸载 rpm -e vsftpd-2.2.2-13.el6_6.1.x86_64 返回：卸载时自动备份vsftp的用户列表</description>
    </item>
    
    <item>
      <title>Golang在Mac、linux、windows系统下交叉编译</title>
      <link>https://imxcz.com/post/2018/golang-jiaochabianyi/</link>
      <pubDate>Mon, 05 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imxcz.com/post/2018/golang-jiaochabianyi/</guid>
      <description>Golang在Mac、linux、windows系统下交叉编译 Golang 支持交叉编译，在一个平台上生成另一个平台的可执行程序，最近使用了一下，非常好用，这里备忘一下。 Mac 下编译 Linux 和 Windows 64位可</description>
    </item>
    
    <item>
      <title>Gin实战:Gin&#43;Mysql简单的Restful风格API简介</title>
      <link>https://imxcz.com/post/2018/gin-shizhan-restful/</link>
      <pubDate>Thu, 01 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://imxcz.com/post/2018/gin-shizhan-restful/</guid>
      <description>Gin实战：Gin+Mysql简单的Restful风格的API 我们已经了解了Golang的Gin框架。对于Webservice服务，restful风格几乎一统天下。Gin也天然的支</description>
    </item>
    
    <item>
      <title></title>
      <link>https://imxcz.com/post/1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://imxcz.com/post/1/</guid>
      <description>看过awesome-go项目， 汇总了很多go开源项目。 但是awesome-go收集了太全了， 而且每个项目没有详细描述。 因此我自己根据go语言中文社区提供的资料，还有互联网企业架构设</description>
    </item>
    
    <item>
      <title></title>
      <link>https://imxcz.com/post/1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://imxcz.com/post/1/</guid>
      <description>Golang 正则表达式 Golang中的正则表达式 ------------------------------------------------------------ 用法： ------------------------------ 单一： . 匹配任意一个字符，如果设置 s = true，则可以匹配换行符 [字符类] 匹配“字符类”中的一个字符，“字符类”见后面的说明 [^字符</description>
    </item>
    
    <item>
      <title></title>
      <link>https://imxcz.com/post/1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://imxcz.com/post/1/</guid>
      <description>其他的系统我不太清楚，但是aliyun的centos模板自带许多阿里云的服务，比如说云盾，cloudwatch等等，而这些往往是我们不愿意透露出去的，因此需要一上来就删掉这些服务，</description>
    </item>
    
  </channel>
</rss>
